(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{64:function(e,n,o){"use strict";o.r(n),o.d(n,"frontMatter",(function(){return r})),o.d(n,"metadata",(function(){return c})),o.d(n,"rightToc",(function(){return l})),o.d(n,"default",(function(){return s}));var t=o(2),i=o(6),a=(o(0),o(86)),r={title:"Hello Docker",tags:["docker"]},c={permalink:"/blog/2019/05/28/docker",source:"@site/blog/2019-05-28-docker.md",description:"Docker ?",date:"2019-05-28T00:00:00.000Z",tags:[{label:"docker",permalink:"/blog/tags/docker"}],title:"Hello Docker",readingTime:2.625,truncated:!0,prevItem:{title:"My goal",permalink:"/blog/2020/06/05/my-goal"}},l=[],d={rightToc:l};function s(e){var n=e.components,o=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(t.a)({},d,o,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"docker-"},"Docker ?"),Object(a.b)("p",null,"Docker is platform which helps us to ship, build and deploy application. It provides us containerization platform which is different then virtual machine. A VM (Virtual Machine) is whole OS which sits on top of a host OS but a container is just a collection of things which we need."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"docker run -it -d")," Command docker run will pass a message to docker client with command -it which means to become interactive and -d which means run it in daemon mode. ",Object(a.b)("inlineCode",{parentName:"p"},"docker exec -it cfc5986d653d bash")," This command will execute a command in a provided container id or container name. It will only work if our container is running and not stopped. To stop our docker container we have to run docker stop ","[containerId]",". We can see list of docker containers which are running by command ",Object(a.b)("inlineCode",{parentName:"p"},"docker ps")," but it will not show the container which are not running currently. To list all the container which both are running or not we have to provide extra argument ",Object(a.b)("inlineCode",{parentName:"p"},"-a")," to command ",Object(a.b)("inlineCode",{parentName:"p"},"docker ps"),", which will make ",Object(a.b)("inlineCode",{parentName:"p"},"docker ps -a"),"."),Object(a.b)("p",null,"To list all the images we have used or pulled in our local machine we can use the command ",Object(a.b)("inlineCode",{parentName:"p"},"docker images")," and to search an image from command line we can hit ",Object(a.b)("inlineCode",{parentName:"p"},"docker search [keyword]")," which will list all matching images found in docker hub registry."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"docker kill [containerid]")," to kill any container which are refusing to shut down. How kill differs from stop is that ",Object(a.b)("inlineCode",{parentName:"p"},"stop")," will wait and shut down gracefully where kill will just stop everything and it doesn\u2019t care or know anything about word ",Object(a.b)("inlineCode",{parentName:"p"},"graceful"),"."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"docker rm [containerid]")," to remove container from machine and ",Object(a.b)("inlineCode",{parentName:"p"},"docker rmi [imageid]")," to remove docker image from local machine."),Object(a.b)("h1",{id:"docker-image-and-docker-container"},"Docker image and docker container?"),Object(a.b)("p",null,"Docker image can be understood, at least for me as a class and docker container are an instance of it. I am OOP lover and understanding this way helps me to understand it visually and conceptually. Like a class can have multiple instances of object similarly a image will have multiple instances which can called as container."),Object(a.b)("h1",{id:"dockerfile"},"Dockerfile"),Object(a.b)("p",null,"A dockerfile is simple plain text file where we write about how our image will be created. It is simple text file so it can be open and edited by any text editor which can handle mime text/plain. I think every editor does that even photoshop. In our dockerfile we will write instructions to build image by using some special command which is understood by only docker and not photoshop."),Object(a.b)("p",null,"Some command i remember are."),Object(a.b)("p",null,"FROM, ADD, RUN, WORKDIR, CMD, ENV etc."),Object(a.b)("p",null,"FROM - will pull image from docker hub or your private/public repository"),Object(a.b)("p",null,"ADD - Will add files/folders to image/container"),Object(a.b)("p",null,"RUN - Will run provided command which can be understood by OS"),Object(a.b)("p",null,"WORKDIR - will set our work directory"),Object(a.b)("p",null,"CMD - same like run but takes args, ENV - ?"),Object(a.b)("h1",{id:"remove-all-containers-running-and-not-running"},"Remove all containers running and not running"),Object(a.b)("p",null,"sudo docker rm -f \\$(sudo docker ps -a -q) // Removes all container"),Object(a.b)("h1",{id:"mount"},"Mount"),Object(a.b)("p",null,"docker run -it -v /home/prai/Pictures:/app -d keyboard"),Object(a.b)("h1",{id:"volume"},"Volume"),Object(a.b)("p",null,"docker run -it --mount source=test,target=/app -d keyboard"))}s.isMDXComponent=!0}}]);